name: Pull Request Checks

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize

jobs:

  run-pr-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Look for the platypus
        run: |
          if grep -q "Platypus" ${{ github.workspace }}/website/index.html
          then
            exit 0
          else
            exit 1
          fi

  show-terraform-plans-for-stage:
    needs: run-pr-tests
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: stage
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_SECRET }}

      - name: Terraform Format
        working-directory: ./infrastructure
        run: terraform fmt -check
      
      - name: Terraform Init
        working-directory: ./infrastructure
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infrastructure
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ./infrastructure
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### INCOMING STAGE INFRASTRUCTURE CHANGES:
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  show-terraform-plans-for-production:
    needs: run-pr-tests
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_SECRET }}

      - name: Terraform Format
        working-directory: ./infrastructure
        run: terraform fmt -check
      
      - name: Terraform Init
        working-directory: ./infrastructure
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infrastructure
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ./infrastructure
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### INCOMING PRODUCTION INFRASTRUCTURE CHANGES:
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1